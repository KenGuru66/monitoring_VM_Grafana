#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å KB –≤ –¥–∞—à–±–æ—Ä–¥–µ Grafana.

–ü—Ä–æ–±–ª–µ–º–∞: –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è *_kb (–∫–∏–ª–æ–±–∞–π—Ç—ã), –Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö.
–†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 1024 –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Å _kb –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.
"""

import json
import re
import sys
from pathlib import Path

def fix_kb_metrics(dashboard_path):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ KB –≤ dashboard Grafana."""
    
    print(f"üìñ –ß–∏—Ç–∞–µ–º dashboard: {dashboard_path}")
    with open(dashboard_path, 'r', encoding='utf-8') as f:
        dashboard = json.load(f)
    
    metrics_fixed = 0
    metrics_with_kb = set()
    
    def fix_expr(expr):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç expression, –¥–æ–±–∞–≤–ª—è—è –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 1024 –¥–ª—è –º–µ—Ç—Ä–∏–∫ SIZE –≤ KB.
        
        –ù–ï —Ç—Ä–æ–≥–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ bandwidth_kb_s (—ç—Ç–æ —É–∂–µ KB/s, –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∏—Ç—å).
        """
        nonlocal metrics_fixed
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å _size_kb –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        # –ü—Ä–∏–º–µ—Ä—ã: huawei_avg_i_o_size_kb{...}, huawei_avg_read_i_o_size_kb{...}
        # –í–ê–ñ–ù–û: –ù–ï –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å _kb_s (—ç—Ç–æ bandwidth –≤ KB/s)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º negative lookahead (?!_s) —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å _kb_s
        pattern = r'(huawei_[a-z_]*size_kb)(?!_s)(\{[^}]*\})?'
        
        matches = re.findall(pattern, expr)
        if matches:
            for metric, labels in matches:
                metrics_with_kb.add(metric)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–µ—Ä–Ω—É—Ç–æ –ª–∏ —É–∂–µ –≤ –¥–µ–ª–µ–Ω–∏–µ
            if '/1024' not in expr and '/ 1024' not in expr:
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –° –ª–µ–π–±–ª–∞–º–∏ –≤ —Å–∫–æ–±–∫–∏ –∏ –¥–µ–ª–∏–º –Ω–∞ 1024
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: (metric{labels})/1024
                fixed_expr = re.sub(pattern, r'(\1\2)/1024', expr)
                if fixed_expr != expr:
                    metrics_fixed += 1
                    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {metric}")
                    return fixed_expr
        
        return expr
    
    def process_panel(panel):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª–∏ dashboard."""
        nonlocal metrics_fixed
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (collapsed rows)
        if 'panels' in panel:
            for sub_panel in panel['panels']:
                process_panel(sub_panel)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ targets (queries)
        if 'targets' in panel:
            for target in panel['targets']:
                if 'expr' in target:
                    original_expr = target['expr']
                    fixed_expr = fix_expr(original_expr)
                    
                    if fixed_expr != original_expr:
                        target['expr'] = fixed_expr
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
    if 'panels' in dashboard:
        for panel in dashboard['panels']:
            process_panel(panel)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å KB: {len(metrics_with_kb)}")
    print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π: {metrics_fixed}")
    
    if metrics_with_kb:
        print(f"\nüîç –ú–µ—Ç—Ä–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        for metric in sorted(metrics_with_kb):
            print(f"   - {metric}")
    
    if metrics_fixed > 0:
        # –°–æ–∑–¥–∞–µ–º backup
        backup_path = dashboard_path.with_suffix('.json.backup')
        print(f"\nüíæ –°–æ–∑–¥–∞–µ–º backup: {backup_path}")
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(json.load(open(dashboard_path, 'r', encoding='utf-8')), f, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π dashboard
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π dashboard: {dashboard_path}")
        with open(dashboard_path, 'w', encoding='utf-8') as f:
            json.dump(dashboard, f, indent=2)
        
        print(f"\n‚úÖ Dashboard –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        print(f"   –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Å _kb —Ç–µ–ø–µ—Ä—å –¥–µ–ª—è—Ç—Å—è –Ω–∞ 1024")
        print(f"   Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {backup_path}")
    else:
        print(f"\n‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ —Å KB –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    
    return metrics_fixed

def main():
    dashboard_path = Path(__file__).parent / "grafana/provisioning/dashboards/Huawei-OceanStor-Real-Data.json"
    
    if not dashboard_path.exists():
        print(f"‚ùå Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω: {dashboard_path}")
        sys.exit(1)
    
    print("="*80)
    print("  FIX KB METRICS IN GRAFANA DASHBOARD")
    print("="*80)
    print()
    
    metrics_fixed = fix_kb_metrics(dashboard_path)
    
    print()
    print("="*80)
    print()
    
    if metrics_fixed > 0:
        print("üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å Grafana: docker-compose restart grafana")
        print("   2. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—à–±–æ—Ä–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ (Ctrl+R)")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ Avg. I/O size")
        print()
        print("‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é:")
        print(f"   mv {dashboard_path}.backup {dashboard_path}")

if __name__ == "__main__":
    main()

