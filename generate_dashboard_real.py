#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—à–±–æ—Ä–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö.
"""

import json
import sys

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
try:
    from resource_metric_mapping_real import (
        RESOURCE_MAPPING, METRIC_MAPPING, RESOURCE_TO_METRICS, DEFAULT_RESOURCES
    )
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–∞–ø–ø–∏–Ω–≥ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: resource_metric_mapping_real.py")
except ImportError:
    print("‚ö†Ô∏è  –§–∞–π–ª resource_metric_mapping_real.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python3 build_dashboard_from_real_data.py")
    sys.exit(1)

from generate_dashboard_fixed import (
    create_panel, get_unit_for_metric, create_row, sanitize_metric_name
)

def generate_dashboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    panels = []
    panel_id = 1
    y_position = 0
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    for resource_id in DEFAULT_RESOURCES:
        resource_name = RESOURCE_MAPPING[resource_id]
        metric_ids = RESOURCE_TO_METRICS[resource_id]
        
        # –°–æ–∑–¥–∞–µ–º row –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        row = create_row(f"üìä {resource_name}", y_position, panel_id)
        row_panels = []
        panel_id += 1
        y_position += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –¢–û–õ–¨–ö–û –¥–ª—è –º–µ—Ç—Ä–∏–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        inner_y = 0
        for i, metric_id in enumerate(metric_ids):
            if metric_id not in METRIC_MAPPING:
                print(f"‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∞ {metric_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ METRIC_MAPPING, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            metric_title = METRIC_MAPPING[metric_id]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            unit = get_unit_for_metric(metric_title)
            
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–∞–Ω–µ–ª–∏ –ø–æ 2 –≤ —Ä—è–¥ (12 —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–∞—è)
            x_pos = 0 if i % 2 == 0 else 12
            if i > 0 and i % 2 == 0:
                inner_y += 8
            
            panel = create_panel(metric_title, metric_id, metric_title, resource_id, inner_y, panel_id, unit)
            panel["gridPos"]["x"] = x_pos
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ - —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Ä–µ—Å—É—Ä—Å–∞
            panel["title"] = metric_title
            
            row_panels.append(panel)
            panel_id += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ row
        row["panels"] = row_panels
        panels.append(row)
        y_position += 1
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    dashboard = {
        "annotations": {
            "list": [{
                "builtIn": 1,
                "datasource": {"type": "grafana", "uid": "-- Grafana --"},
                "enable": True,
                "hide": True,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
            }]
        },
        "editable": True,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 0,
        "id": None,
        "links": [],
        "panels": panels,
        "preload": False,
        "refresh": "",
        "schemaVersion": 41,
        "tags": ["oceanstor", "performance", "huawei", "real-data"],
        "templating": {
            "list": [
                {
                    "current": {"text": "All", "value": "$__all"},
                    "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
                    "definition": "label_values(SN)",
                    "description": "–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Å–∏–≤–∞",
                    "includeAll": True,
                    "multi": True,
                    "name": "SN",
                    "options": [],
                    "query": {"qryType": 1, "query": "label_values(SN)", "refId": "PrometheusVariableQueryEditor-VariableQuery"},
                    "refresh": 2,
                    "regex": "",
                    "sort": 1,
                    "type": "query"
                },
                {
                    "current": {"text": "All", "value": ["$__all"]},
                    "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
                    "definition": "label_values({SN=~\"$SN\"},Resource)",
                    "description": "–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (Controller, LUN, Disk –∏ —Ç.–¥.)",
                    "includeAll": True,
                    "multi": True,
                    "name": "Resource",
                    "options": [],
                    "query": {"qryType": 1, "query": "label_values({SN=~\"$SN\"},Resource)", "refId": "PrometheusVariableQueryEditor-VariableQuery"},
                    "refresh": 2,
                    "regex": "",
                    "sort": 1,
                    "type": "query"
                },
                {
                    "current": {"text": "All", "value": ["$__all"]},
                    "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
                    "definition": "label_values({SN=~\"$SN\", Resource=~\"$Resource\"},Element)",
                    "description": "–≠–ª–µ–º–µ–Ω—Ç (0A, 0B, CTE0.A.IOM0.P0 –∏ —Ç.–¥.)",
                    "includeAll": True,
                    "multi": True,
                    "name": "Element",
                    "options": [],
                    "query": {"qryType": 1, "query": "label_values({SN=~\"$SN\", Resource=~\"$Resource\"},Element)", "refId": "PrometheusVariableQueryEditor-VariableQuery"},
                    "refresh": 2,
                    "regex": "",
                    "sort": 1,
                    "type": "query"
                }
            ]
        },
        "time": {"from": "now-6h", "to": "now"},
        "timepicker": {},
        "timezone": "",
        "title": "Huawei OceanStor - Real Data",
        "uid": "huawei-oceanstor-real",
        "version": 1
    }
    
    return dashboard

if __name__ == "__main__":
    dashboard = generate_dashboard()
    output_file = "grafana/provisioning/dashboards/Huawei-OceanStor-Real-Data.json"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(dashboard, f, indent=2, ensure_ascii=False)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_panels = sum(len(panel.get("panels", [])) for panel in dashboard["panels"])
    
    print("="*80)
    print("‚úÖ –î–ê–®–ë–û–†–î –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
    print("="*80)
    print(f"üìÅ –§–∞–π–ª: {output_file}")
    print(f"üìä –†–µ—Å—É—Ä—Å–æ–≤: {len(DEFAULT_RESOURCES)}")
    print(f"üéØ –í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels}")
    print()
    print("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for resource_id in DEFAULT_RESOURCES:
        resource_name = RESOURCE_MAPPING[resource_id]
        metric_count = len(RESOURCE_TO_METRICS[resource_id])
        print(f"   ‚Ä¢ {resource_name:30s} - {metric_count:3d} –º–µ—Ç—Ä–∏–∫")
    print("="*80)

