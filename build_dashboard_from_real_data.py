#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ Grafana –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–®–∞–≥–∏:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä —Å–æ –í–°–ï–ú–ò –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ Resource-Metric
3. –°–æ–∑–¥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ RESOURCE_TO_METRICS –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥ Grafana
"""

import subprocess
import sys
import os
import csv
import json
from collections import defaultdict
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'Data2csv'))
from METRIC_DICT import METRIC_NAME_DICT
from RESOURCE_DICT import RESOURCE_NAME_DICT

def step1_parse_with_all_metrics(input_zip: str, output_dir: str = "Data2csv/output"):
    """–®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ –í–°–ï–ú–ò –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏"""
    print("="*80)
    print("üìä –®–ê–ì 1: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å–æ –í–°–ï–ú–ò –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏")
    print("="*80)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –º–µ—Ç—Ä–∏–∫ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    all_metrics = list(METRIC_NAME_DICT.keys())
    all_resources = list(RESOURCE_NAME_DICT.keys())
    
    print(f"   –í—Å–µ–≥–æ –º–µ—Ç—Ä–∏–∫: {len(all_metrics)}")
    print(f"   –í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(all_resources)}")
    print()
    
    # –û—á–∏—â–∞–µ–º output –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path = Path(output_dir)
    if output_path.exists():
        for csv_file in output_path.glob("*.csv"):
            csv_file.unlink()
            print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π CSV: {csv_file.name}")
    else:
        output_path.mkdir(parents=True)
    
    print()
    print("   ‚Üí –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = [
        "python3",
        "Data2csv/Huawei_perf_parser_v0.2_parallel.py",
        "-i", input_zip,
        "-o", output_dir
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ—Å—É—Ä—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    for resource_id in all_resources:
        cmd.extend(["-r", resource_id])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for metric_id in all_metrics:
        cmd.extend(["-m", metric_id])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(result.stderr)
        sys.exit(1)
    
    print("   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
    csv_files = list(output_path.glob("*.csv"))
    if not csv_files:
        print("   ‚ùå CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(1)
    
    csv_file = csv_files[0]
    print(f"   üìÅ CSV —Ñ–∞–π–ª: {csv_file}")
    print(f"   üìä –†–∞–∑–º–µ—Ä: {csv_file.stat().st_size / (1024**2):.2f} MB")
    print()
    
    return str(csv_file)

def step2_extract_unique_combinations(csv_file: str):
    """–®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π Resource-Metric"""
    print("="*80)
    print("üìã –®–ê–ì 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π Resource-Metric")
    print("="*80)
    
    # –°–ª–æ–≤–∞—Ä—å: Resource ID ‚Üí set(Metric Names)
    resource_metrics = defaultdict(set)
    
    # –°—á–µ—Ç—á–∏–∫–∏
    total_rows = 0
    processed_rows = 0
    
    print("   ‚Üí –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...")
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        first_line = f.readline()
        f.seek(0)
        
        if '\t' in first_line:
            delimiter = '\t'
        elif ';' in first_line:
            delimiter = ';'
        else:
            delimiter = ','
        
        reader = csv.reader(f, delimiter=delimiter)
        
        for row in reader:
            total_rows += 1
            
            if len(row) < 3:
                continue
            
            resource_id = row[0].strip()
            metric_name = row[1].strip()
            
            if resource_id and metric_name:
                resource_metrics[resource_id].add(metric_name)
                processed_rows += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100k —Å—Ç—Ä–æ–∫
            if total_rows % 100000 == 0:
                print(f"   ... –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_rows:,} —Å—Ç—Ä–æ–∫")
    
    print()
    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows:,}")
    print(f"   ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {processed_rows:,}")
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resource_metrics)}")
    print()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ—Å—É—Ä—Å—É
    print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º:")
    print()
    
    for resource_id in sorted(resource_metrics.keys()):
        resource_name = RESOURCE_NAME_DICT.get(resource_id, f"Unknown ({resource_id})")
        metric_count = len(resource_metrics[resource_id])
        print(f"      ‚Ä¢ {resource_name:30s} (ID: {resource_id:5s}) - {metric_count:3d} –º–µ—Ç—Ä–∏–∫")
    
    print()
    
    return resource_metrics

def step3_create_metric_mapping(resource_metrics: dict):
    """–®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫"""
    print("="*80)
    print("üó∫Ô∏è  –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ Resource ‚Üí Metrics")
    print("="*80)
    
    # –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: Metric Name ‚Üí Metric ID
    metric_name_to_id = {}
    for metric_id, metric_name in METRIC_NAME_DICT.items():
        metric_name_to_id[metric_name] = metric_id
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥: Resource ID ‚Üí [Metric IDs]
    resource_to_metric_ids = {}
    
    for resource_id, metric_names in resource_metrics.items():
        metric_ids = []
        
        for metric_name in sorted(metric_names):
            # –ù–∞—Ö–æ–¥–∏–º ID –º–µ—Ç—Ä–∏–∫–∏
            metric_id = metric_name_to_id.get(metric_name)
            if metric_id:
                metric_ids.append(metric_id)
            else:
                print(f"   ‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∞ '{metric_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ METRIC_NAME_DICT")
        
        if metric_ids:
            resource_to_metric_ids[resource_id] = metric_ids
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è {len(resource_to_metric_ids)} —Ä–µ—Å—É—Ä—Å–æ–≤")
    print()
    
    return resource_to_metric_ids

def step4_save_mapping(resource_to_metric_ids: dict, output_file: str = "resource_metric_mapping_real.py"):
    """–®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª"""
    print("="*80)
    print("üíæ –®–ê–ì 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª")
    print("="*80)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('#!/usr/bin/env python3\n')
        f.write('"""\n')
        f.write('–ú–∞–ø–ø–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö.\n')
        f.write('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ CSV —Ñ–∞–π–ª–∞.\n')
        f.write('"""\n\n')
        
        f.write('# –ú–∞–ø–ø–∏–Ω–≥ ID —Ä–µ—Å—É—Ä—Å–æ–≤ ‚Üí –Ω–∞–∑–≤–∞–Ω–∏—è\n')
        f.write('RESOURCE_MAPPING = {\n')
        for resource_id in sorted(resource_to_metric_ids.keys()):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º resource_id –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            resource_name = RESOURCE_NAME_DICT.get(resource_id, resource_id)
            f.write(f'    "{resource_id}": "{resource_name}",\n')
        f.write('}\n\n')
        
        f.write('# –ú–∞–ø–ø–∏–Ω–≥ ID –º–µ—Ç—Ä–∏–∫ ‚Üí –Ω–∞–∑–≤–∞–Ω–∏—è\n')
        f.write('METRIC_MAPPING = {\n')
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        all_metric_ids = set()
        for metric_ids in resource_to_metric_ids.values():
            all_metric_ids.update(metric_ids)
        
        for metric_id in sorted(all_metric_ids):
            metric_name = METRIC_NAME_DICT.get(metric_id, f"Unknown_{metric_id}")
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫–∏
            metric_name = metric_name.replace('"', '\\"')
            f.write(f'    "{metric_id}": "{metric_name}",\n')
        f.write('}\n\n')
        
        f.write('# –ú–∞–ø–ø–∏–Ω–≥: –†–µ—Å—É—Ä—Å ‚Üí –°–ø–∏—Å–æ–∫ –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –º–µ—Ç—Ä–∏–∫ (–ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•)\n')
        f.write('RESOURCE_TO_METRICS = {\n')
        for resource_id in sorted(resource_to_metric_ids.keys()):
            metric_ids = resource_to_metric_ids[resource_id]
            f.write(f'    "{resource_id}": [  # {RESOURCE_NAME_DICT.get(resource_id, "Unknown")}\n')
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 10 –º–µ—Ç—Ä–∏–∫ –≤ —Å—Ç—Ä–æ–∫—É
            for i in range(0, len(metric_ids), 10):
                chunk = metric_ids[i:i+10]
                metric_list = ', '.join(f'"{m}"' for m in chunk)
                f.write(f'        {metric_list},\n')
            
            f.write('    ],\n')
        f.write('}\n\n')
        
        f.write('# –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n')
        f.write('DEFAULT_RESOURCES = [\n')
        for resource_id in sorted(resource_to_metric_ids.keys()):
            f.write(f'    "{resource_id}",  # {RESOURCE_NAME_DICT.get(resource_id, "Unknown")}\n')
        f.write(']\n')
    
    print(f"   ‚úÖ –ú–∞–ø–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    print()
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_metrics = sum(len(ids) for ids in resource_to_metric_ids.values())
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"      ‚Ä¢ –†–µ—Å—É—Ä—Å–æ–≤: {len(resource_to_metric_ids)}")
    print(f"      ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {len(all_metric_ids)}")
    print(f"      ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_metrics}")
    print()

def step5_generate_dashboard():
    """–®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    print("="*80)
    print("üìà –®–ê–ì 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ Grafana")
    print("="*80)
    
    print("   ‚Üí –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—à–±–æ—Ä–¥–∞
    cmd = ["python3", "generate_dashboard_real.py"]
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(result.stderr)
        sys.exit(1)
    
    print(result.stdout)
    print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print()
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                                                                ‚ïë")
    print("‚ïë   üìä –ü–û–°–¢–†–û–ï–ù–ò–ï –î–ê–®–ë–û–†–î–ê –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•            ‚ïë")
    print("‚ïë                                                                ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    input_zip = "Data2csv/logs/Storage_History_Performance_Files (1).zip"
    
    if not Path(input_zip).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_zip}")
        print()
        print("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ ZIP –∞—Ä—Ö–∏–≤—É:")
        input_zip = input("> ").strip()
        
        if not Path(input_zip).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_zip}")
            sys.exit(1)
    
    print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_zip}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
    csv_file = step1_parse_with_all_metrics(input_zip)
    resource_metrics = step2_extract_unique_combinations(csv_file)
    resource_to_metric_ids = step3_create_metric_mapping(resource_metrics)
    step4_save_mapping(resource_to_metric_ids)
    step5_generate_dashboard()
    
    # –ò—Ç–æ–≥
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                                                                ‚ïë")
    print("‚ïë            ‚úÖ –í–°–ï –®–ê–ì–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!                      ‚ïë")
    print("‚ïë                                                                ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    print()
    print("üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   ‚Ä¢ resource_metric_mapping_real.py - –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ grafana/provisioning/dashboards/Huawei-OceanStor-Real-Data.json")
    print()
    print("üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV –≤ VictoriaMetrics:")
    print("      python3 csv2vm_parallel.py", csv_file)
    print()
    print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ Grafana: http://localhost:3000")
    print("   3. –ù–∞–π–¥–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: 'Huawei OceanStor - Real Data'")
    print()

if __name__ == "__main__":
    main()

