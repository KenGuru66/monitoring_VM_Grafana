#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞—à–±–æ—Ä–¥–∞ Grafana –¥–ª—è Huawei OceanStor.
–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º –∏ –∏—Ö –º–µ—Ç—Ä–∏–∫–∞–º.
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from resource_metric_mapping_fixed import RESOURCE_MAPPING, METRIC_MAPPING, RESOURCE_TO_METRICS, DEFAULT_RESOURCES

def sanitize_metric_name(metric_name):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è Prometheus.
    –ù–∞–ø—Ä–∏–º–µ—Ä: "Avg. CPU Usage (%)" -> "avg_cpu_usage_percent"
    """
    # –ó–∞–º–µ–Ω—è–µ–º % –Ω–∞ percent
    name = metric_name.replace("(%)", "percent").replace(" (%)", "_percent")
    name = name.replace("(", "").replace(")", "")
    
    # –ó–∞–º–µ–Ω—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
    name = name.replace("(MB/s)", "mb_s").replace("(KB/s)", "kb_s").replace("(KB)", "kb")
    name = name.replace("(IO/s)", "io_s").replace("(us)", "us").replace("(ms)", "ms")
    
    # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    name = name.replace("/", "_").replace("-", "_").replace(".", "").replace(",", "")
    name = name.replace(":", "").replace("[", "").replace("]", "").replace("+‚àû", "inf")
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = "_".join(name.lower().split())
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    while "__" in name:
        name = name.replace("__", "_")
    
    return name.strip("_")

def create_panel(title, metric_id, metric_title, resource_id, y_pos, panel_id, unit="short"):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–º Resource ID"""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è Prometheus
    metric_name = "huawei_" + sanitize_metric_name(metric_title)
    
    return {
        "datasource": {
            "type": "prometheus",
            "uid": "P4169E866C3094E38"
        },
        "fieldConfig": {
            "defaults": {
                "color": {"mode": "palette-classic"},
                "custom": {
                    "axisBorderShow": False,
                    "axisCenteredZero": False,
                    "axisColorMode": "text",
                    "axisLabel": "",
                    "axisPlacement": "auto",
                    "barAlignment": 0,
                    "barWidthFactor": 0.6,
                    "drawStyle": "line",
                    "fillOpacity": 0,
                    "gradientMode": "none",
                    "hideFrom": {"legend": False, "tooltip": False, "viz": False},
                    "insertNulls": False,
                    "lineInterpolation": "linear",
                    "lineWidth": 1,
                    "pointSize": 5,
                    "scaleDistribution": {"type": "linear"},
                    "showPoints": "auto",
                    "spanNulls": False,
                    "stacking": {"group": "A", "mode": "none"},
                    "thresholdsStyle": {"mode": "off"}
                },
                "mappings": [],
                "thresholds": {
                    "mode": "absolute",
                    "steps": [
                        {"color": "green", "value": 0},
                        {"color": "red", "value": 80}
                    ]
                },
                "unit": unit
            },
            "overrides": []
        },
        "gridPos": {"h": 8, "w": 12, "x": 0, "y": y_pos},
        "id": panel_id,
        "options": {
            "legend": {
                "calcs": [],
                "displayMode": "list",
                "placement": "bottom",
                "showLegend": True
            },
            "tooltip": {"hideZeros": False, "mode": "multi", "sort": "none"}
        },
        "pluginVersion": "12.1.1",
        "targets": [{
            "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
            "disableTextWrap": False,
            "editorMode": "builder",
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω Resource ID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SN –≤–º–µ—Å—Ç–æ array
            # Resource –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏, $Resource –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ Element
            "expr": f'{metric_name}{{SN=~"$SN", Resource="{resource_id}", Element=~"$Element"}}',
            "fullMetaSearch": False,
            "includeNullMetadata": True,
            "instant": False,
            "legendFormat": "{{Element}}",
            "range": True,
            "refId": "A",
            "useBackend": False
        }],
        "title": title,
        "transformations": [{
            "id": "renameByRegex",
            "options": {"regex": "(.*)\\s+", "renamePattern": "$1"}
        }],
        "type": "timeseries"
    }

def get_unit_for_metric(metric_title):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Ç—Ä–∏–∫–∏"""
    if "(%)" in metric_title or "percent" in metric_title.lower() or "ratio" in metric_title.lower():
        return "percent"
    elif "(MB/s)" in metric_title:
        return "MBs"
    elif "(KB/s)" in metric_title:
        return "KBs"
    elif "(IO/s)" in metric_title or "iops" in metric_title.lower():
        return "iops"
    elif "(KB)" in metric_title:
        return "deckbytes"
    elif "(us)" in metric_title:
        return "¬µs"
    elif "(ms)" in metric_title or "time" in metric_title.lower():
        return "ms"
    else:
        return "short"

def create_row(title, y_pos, row_id):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–≥—Ä—É–ø–ø—É (collapsible row)"""
    return {
        "collapsed": True,
        "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
        "gridPos": {"h": 1, "w": 24, "x": 0, "y": y_pos},
        "id": row_id,
        "panels": [],
        "title": title,
        "type": "row"
    }

def generate_dashboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
    panels = []
    panel_id = 1
    y_position = 0
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    for resource_id in DEFAULT_RESOURCES:
        resource_name = RESOURCE_MAPPING[resource_id]
        metric_ids = RESOURCE_TO_METRICS[resource_id]
        
        # –°–æ–∑–¥–∞–µ–º row –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        row = create_row(f"üìä {resource_name}", y_position, panel_id)
        row_panels = []
        panel_id += 1
        y_position += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –¢–û–õ–¨–ö–û –¥–ª—è –º–µ—Ç—Ä–∏–∫, –ø—Ä–∏–º–µ–Ω–∏–º—ã—Ö –∫ —ç—Ç–æ–º—É —Ä–µ—Å—É—Ä—Å—É
        inner_y = 0
        for i, metric_id in enumerate(metric_ids):
            if metric_id not in METRIC_MAPPING:
                print(f"‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∞ {metric_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ METRIC_MAPPING, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
                
            metric_title = METRIC_MAPPING[metric_id]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
            unit = get_unit_for_metric(metric_title)
            
            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–∞–Ω–µ–ª–∏ –ø–æ 2 –≤ —Ä—è–¥ (12 —à–∏—Ä–∏–Ω–∞ –∫–∞–∂–¥–∞—è)
            x_pos = 0 if i % 2 == 0 else 12
            if i > 0 and i % 2 == 0:
                inner_y += 8
            
            panel = create_panel(metric_title, metric_id, metric_title, resource_id, inner_y, panel_id, unit)
            panel["gridPos"]["x"] = x_pos
            
            row_panels.append(panel)
            panel_id += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ row
        row["panels"] = row_panels
        panels.append(row)
        y_position += 1
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    dashboard = {
        "annotations": {
            "list": [{
                "builtIn": 1,
                "datasource": {"type": "grafana", "uid": "-- Grafana --"},
                "enable": True,
                "hide": True,
                "iconColor": "rgba(0, 211, 255, 1)",
                "name": "Annotations & Alerts",
                "type": "dashboard"
            }]
        },
        "editable": True,
        "fiscalYearStartMonth": 0,
        "graphTooltip": 0,
        "id": None,
        "links": [],
        "panels": panels,
        "preload": False,
        "refresh": "",
        "schemaVersion": 41,
        "tags": ["oceanstor", "performance", "huawei"],
        "templating": {
            "list": [
                {
                    "current": {"text": "All", "value": "$__all"},
                    "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
                    "definition": "label_values(array)",
                    "includeAll": True,
                    "multi": True,
                    "name": "array",
                    "options": [],
                    "query": {"qryType": 1, "query": "label_values(array)", "refId": "PrometheusVariableQueryEditor-VariableQuery"},
                    "refresh": 2,
                    "regex": "",
                    "sort": 1,
                    "type": "query"
                },
                {
                    "current": {"text": "All", "value": ["$__all"]},
                    "datasource": {"type": "prometheus", "uid": "P4169E866C3094E38"},
                    "definition": "label_values({array=~\"$array\"},Element)",
                    "includeAll": True,
                    "multi": True,
                    "name": "Element",
                    "options": [],
                    "query": {"qryType": 1, "query": "label_values({array=~\"$array\"},Element)", "refId": "PrometheusVariableQueryEditor-VariableQuery"},
                    "refresh": 2,
                    "regex": "",
                    "sort": 1,
                    "type": "query"
                }
            ]
        },
        "time": {"from": "now-6h", "to": "now"},
        "timepicker": {},
        "timezone": "",
        "title": "Huawei OceanStor Performance",
        "uid": "huawei-oceanstor-perf",
        "version": 1
    }
    
    return dashboard

if __name__ == "__main__":
    dashboard = generate_dashboard()
    output_file = "grafana/provisioning/dashboards/Huawei-OceanStor-Performance.json"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(dashboard, f, indent=2, ensure_ascii=False)
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_panels = sum(len(panel.get("panels", [])) for panel in dashboard["panels"])
    
    print("="*80)
    print("‚úÖ –î–ê–®–ë–û–†–î –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
    print("="*80)
    print(f"üìÅ –§–∞–π–ª: {output_file}")
    print(f"üìä –†–µ—Å—É—Ä—Å–æ–≤: {len(DEFAULT_RESOURCES)}")
    print(f"üéØ –í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels}")
    print()
    print("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for resource_id in DEFAULT_RESOURCES:
        resource_name = RESOURCE_MAPPING[resource_id]
        metric_count = len(RESOURCE_TO_METRICS[resource_id])
        print(f"   ‚Ä¢ {resource_name:20s} - {metric_count:2d} –º–µ—Ç—Ä–∏–∫")
    print("="*80)

