#!/usr/bin/env python
"""
–ò–º–ø–æ—Ä—Ç TSV/CSV-—Ñ–∞–π–ª–∞ OceanStor –≤ VictoriaMetrics.

–°–∫—Ä–∏–ø—Ç —á–∏—Ç–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Huawei OceanStor –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö
–≤ VictoriaMetrics –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ HU Perf.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (TSV/CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏: —Ç–∞–±—É–ª—è—Ü–∏—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –∑–∞–ø—è—Ç–∞—è):
    Controller;KV CPU Usage (%);0A;85;2025-09-22T00:05:00Z;1758488700.0
    
    –ö–æ–ª–æ–Ω–∫–∞ 0: Resource - —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (Controller, Disk, Pool, –∏ —Ç.–¥.)
    –ö–æ–ª–æ–Ω–∫–∞ 1: Metric - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (KV CPU Usage (%), Max Bandwidth (Mbps), –∏ —Ç.–¥.)
    –ö–æ–ª–æ–Ω–∫–∞ 2: Element - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (0A, 0B, disk01, –∏ —Ç.–¥.)
    –ö–æ–ª–æ–Ω–∫–∞ 3: Value - –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (85)
    –ö–æ–ª–æ–Ω–∫–∞ 4: ISO timestamp - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ ISO-8601 (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    –ö–æ–ª–æ–Ω–∫–∞ 5: Unix timestamp - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (Prometheus exposition format –¥–ª—è HU Perf):
    hu_kv_cpu_usage_pct_variable{SN="2102353TJWF****00020",Resource="Controller",Element="0A"} 85 1758488700000
    
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–µ–π–±–ª–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º HU Perf:
    - SN: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (–∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
    - Resource: —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–∏–∑ –∫–æ–ª–æ–Ω–∫–∏ 0)
    - Element: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏–∑ –∫–æ–ª–æ–Ω–∫–∏ 2)
    - Name, Archive, CtrlID: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤ Grafana
"""

import argparse
import csv
import pathlib
import requests
import sys
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('csv2vm_import.log', mode='a', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å tqdm, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
try:
    from tqdm import tqdm
except ImportError:
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è tqdm –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    def tqdm(iterable, desc=None):
        return iterable

# URL endpoint –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ VictoriaMetrics
DEFAULT_URL = "http://localhost:8428/api/v1/import/prometheus"

def detect_delimiter(path: pathlib.Path) -> str:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV —Ñ–∞–π–ª–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±—É–ª—è—Ü–∏–∏, —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
    –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
    
    Args:
        path: –ü—É—Ç—å –∫ CSV/TSV —Ñ–∞–π–ª—É
        
    Returns:
        –°–∏–º–≤–æ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: '\t', ';' –∏–ª–∏ ','
    """
    with open(path, 'r', encoding='utf-8') as f:
        first_line = f.readline()
        if '\t' in first_line:
            return '\t'
        elif ';' in first_line:
            return ';'
        return ','

def sanitize_metric_name(name: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –º–µ—Ç—Ä–∏–∫–∏ Prometheus.
    
    –ü—Ä–∞–≤–∏–ª–∞ Prometheus –¥–ª—è –∏–º–µ–Ω –º–µ—Ç—Ä–∏–∫:
    - —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9) –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (_)
    - –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã
    
    Args:
        name: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "KV CPU Usage (%)")
        
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "kv_cpu_usage_pct")
    """
    result = name.strip().lower()
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    result = result.replace(" (%)", "_pct")      # " (%)" ‚Üí "_pct"
    result = result.replace("(%)", "_pct")       # "(%)" ‚Üí "_pct"
    result = result.replace(" (mbps)", "_mbps")  # " (Mbps)" ‚Üí "_mbps"
    result = result.replace(" (iops)", "_iops")  # " (IOPS)" ‚Üí "_iops"
    # –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∫–æ–±–∫–∏
    result = result.replace("(", "").replace(")", "")
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    result = result.replace(" ", "_")            # –ø—Ä–æ–±–µ–ª—ã ‚Üí –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    result = result.replace("-", "_")            # –¥–µ—Ñ–∏—Å—ã ‚Üí –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    result = result.replace("/", "_")            # —Å–ª—ç—à–∏ ‚Üí –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    result = result.replace("%", "percent")      # –æ—Å—Ç–∞–≤—à–∏–µ—Å—è % ‚Üí percent
    return result

def row_to_prom(row: list, array_sn: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É CSV –≤ —Ñ–æ—Ä–º–∞—Ç Prometheus –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ HU Perf.
    
    –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
        ['Controller', 'KV CPU Usage (%)', '0A', '85', '2025-09-22T00:05:00Z', '1758488700.0']
    
    –í—ã—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
        hu_kv_cpu_usage_pct_variable{SN="2102353TJWF****00020",Resource="Controller",Element="0A"} 85 1758488700000
    
    Args:
        row: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ CSV —Å—Ç—Ä–æ–∫–∏
        array_sn: –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ (–∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus –∏–ª–∏ None –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫
    if len(row) < 6:
        return None
    
    # –ö–æ–ª–æ–Ω–∫–∞ 0: Resource (Controller, Disk, Pool –∏ —Ç.–¥.)
    resource = row[0].strip()
    
    # –ö–æ–ª–æ–Ω–∫–∞ 1: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    # –§–æ—Ä–º–∞—Ç: hu_{metric}_variable
    metric_name = "hu_" + sanitize_metric_name(row[1]) + "_variable"
    
    # –ö–æ–ª–æ–Ω–∫–∞ 2: Element - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (0A, 0B, disk01 –∏ —Ç.–¥.)
    element = row[2].strip()
    
    # –ö–æ–ª–æ–Ω–∫–∞ 3: –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    value = row[3].strip()
    
    # –ö–æ–ª–æ–Ω–∫–∞ 5: Unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    # VictoriaMetrics –æ–∂–∏–¥–∞–µ—Ç timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    ts_unix_sec = float(row[5].strip())
    ts_unix_ms = int(ts_unix_sec * 1000)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ª–µ–π–±–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HU Perf (—Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞)
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ª–µ–π–±–ª—ã: SN, Resource, Element
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–∞—à–±–æ—Ä–¥–æ–º): Name, Archive, CtrlID
    labels = {
        "Element": element,      # –Ω–∞–ø—Ä–∏–º–µ—Ä, Element="0A"
        "Resource": resource,    # –Ω–∞–ø—Ä–∏–º–µ—Ä, Resource="Controller"
        "SN": array_sn          # –Ω–∞–ø—Ä–∏–º–µ—Ä, SN="2102353TJWF****00020"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ª–µ–π–±–ª–æ–≤: Element="...",Resource="...",SN="..."
    label_str = ",".join(f'{k}="{v}"' for k, v in sorted(labels.items()))
    
    # –§–æ—Ä–º–∞—Ç Prometheus: metric_name{labels} value timestamp
    return f"{metric_name}{{{label_str}}} {value} {ts_unix_ms}\n"

def main(path: pathlib.Path, url: str, batch: int):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —á–∏—Ç–∞–µ—Ç CSV/TSV –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ VictoriaMetrics.
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    2. –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç Prometheus
    3. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏ (batches) –≤ VictoriaMetrics
    4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    Args:
        path: –ü—É—Ç—å –∫ CSV/TSV —Ñ–∞–π–ª—É
        url: URL endpoint VictoriaMetrics –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        batch: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º batch-–∑–∞–ø—Ä–æ—Å–µ
    """
    logger.info(f"üöÄ Starting import from: {path}")
    logger.info(f"üìç VictoriaMetrics URL: {url}")
    logger.info(f"üì¶ Batch size: {batch} lines")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
    # –ù–∞–ø—Ä–∏–º–µ—Ä: "2102353TJWF****00020.csv" ‚Üí "2102353TJWF****00020"
    array_sn = path.stem
    logger.info(f"üî¢ Array SN: {array_sn}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    delimiter = detect_delimiter(path)
    logger.info(f"üìã Detected delimiter: {'TAB' if delimiter == chr(9) else repr(delimiter)}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç Prometheus
    logger.info(f"üìñ Reading CSV file...")
    lines = []
    skipped_rows = 0
    with open(path, 'r', encoding='utf-8') as f:
        reader = csv.reader(f, delimiter=delimiter)
        for idx, row in enumerate(reader):
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1 –º–ª–Ω —Å—Ç—Ä–æ–∫
            if idx > 0 and idx % 1000000 == 0:
                logger.info(f"   Processed {idx:,} rows, converted {len(lines):,} lines...")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–ª–æ–Ω–æ–∫
            if len(row) < 6:
                skipped_rows += 1
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É: –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ 3 –Ω–µ —á–∏—Å–ª–æ, —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if idx == 0:
                try:
                    float(row[3])  # –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                except (ValueError, IndexError):
                    logger.info(f"   Skipping header row")
                    skipped_rows += 1
                    continue  # —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç Prometheus
            prom_line = row_to_prom(row, array_sn)
            if prom_line:
                lines.append(prom_line)
    
    logger.info(f"‚úÖ Read complete: {len(lines):,} valid lines, {skipped_rows:,} skipped")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
    if not lines:
        logger.error("‚ùå No valid data rows found")
        sys.exit("‚ùå No valid data rows found")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏ (batches) –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö batches
    total_batches = (len(lines) + batch - 1) // batch
    logger.info(f"üöÄ Starting upload to VictoriaMetrics: {total_batches} batches")
    
    uploaded_lines = 0
    for i in tqdm(range(0, len(lines), batch), desc="upload"):
        batch_num = i // batch + 1
        current_batch_size = min(batch, len(lines) - i)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload: –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ UTF-8
        payload = "".join(lines[i:i + batch]).encode('utf-8')
        
        try:
            # POST –∑–∞–ø—Ä–æ—Å –∫ VictoriaMetrics
            r = requests.post(url, data=payload, timeout=60)
            
            # VictoriaMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 –∏–ª–∏ 204 –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if r.status_code not in (200, 204):
                logger.error(f"‚ùå Batch {batch_num}/{total_batches}: HTTP {r.status_code} - {r.text}")
                sys.exit(f"‚ùå batch {batch_num}: HTTP {r.status_code} - {r.text}")
            
            uploaded_lines += current_batch_size
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
            if batch_num % 10 == 0:
                logger.info(f"   Progress: {batch_num}/{total_batches} batches, {uploaded_lines:,}/{len(lines):,} lines ({100*uploaded_lines//len(lines)}%)")
                
        except requests.RequestException as e:
            logger.error(f"‚ùå Batch {batch_num}/{total_batches}: {e}")
            sys.exit(f"‚ùå batch {batch_num}: {e}")
    
    # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info(f"‚úÖ Import completed successfully!")
    logger.info(f"üìä Total imported: {len(lines):,} rows for SN={array_sn}")
    print(f"‚úÖ imported {len(lines)} rows for SN={array_sn}")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    p = argparse.ArgumentParser(
        description="Import OceanStor CSV/TSV to VictoriaMetrics",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s 2102353TJWFSP3100020.csv
  %(prog)s 2102353TJWFSP3100020.csv --url http://victoriametrics:8428/api/v1/import/prometheus
  %(prog)s data.tsv --batch 5000

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (TSV/CSV):
  Controller;KV CPU Usage (%%);0A;85;2025-09-22T00:05:00Z;1758488700.0
  
  –ö–æ–ª–æ–Ω–∫–∏: Resource;Metric;Element;Value;ISO_timestamp;Unix_timestamp
  
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: —Ç–∞–±—É–ª—è—Ü–∏—è, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –∑–∞–ø—è—Ç–∞—è

–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è HU Perf –¥–∞—à–±–æ—Ä–¥–∞:
  hu_kv_cpu_usage_pct_variable{SN="2102353TJWFSP3100020",Resource="Controller",Element="0A"} 85 1758488700000
        """)
    
    p.add_argument("file", type=pathlib.Path, 
                   help="CSV/TSV file to import")
    p.add_argument("--url", default=DEFAULT_URL, 
                   help=f"VictoriaMetrics import endpoint (default: {DEFAULT_URL})")
    p.add_argument("--batch", type=int, default=10000, 
                   help="lines per batch request (default: 10000)")
    
    args = p.parse_args()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞
    logger.info("="*80)
    logger.info(f"CSV2VM Import Script Started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not args.file.exists():
        logger.error(f"‚ùå File not found: {args.file}")
        sys.exit(f"‚ùå File not found: {args.file}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    try:
        main(args.file, args.url, args.batch)
        logger.info("="*80)
        logger.info(f"Script completed successfully at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info("="*80)
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}", exc_info=True)
        raise